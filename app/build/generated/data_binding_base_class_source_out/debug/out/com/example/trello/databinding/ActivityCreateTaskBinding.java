// Generated by view binder compiler. Do not edit!
package com.example.trello.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trello.R;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCreateTaskBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ShapeableImageView ImageCreateTaskBackArrow;

  @NonNull
  public final ShapeableImageView ImageCreateTaskSaveIcon;

  @NonNull
  public final LinearLayout LBLCreateTaskDescriptionContent;

  @NonNull
  public final EditText LBLCreateTaskTaskName;

  @NonNull
  public final RelativeLayout LBLTASKDescriptionLine;

  @NonNull
  public final RelativeLayout LBLTASKPeopleAssignedLine;

  @NonNull
  public final MaterialTextView LBLTaskDescription;

  @NonNull
  public final MaterialTextView LBLTaskPeopleAssigned;

  @NonNull
  public final EditText editTextCreateTaskAssignTeam;

  @NonNull
  public final EditText editTextCreateTaskDescription;

  @NonNull
  public final Spinner spinnerCreateTaskComplexity;

  @NonNull
  public final Spinner spinnerCreateTaskEmergency;

  @NonNull
  public final Spinner spinnerCreateTaskSize;

  @NonNull
  public final Spinner spinnerCreateTaskStatus;

  private ActivityCreateTaskBinding(@NonNull RelativeLayout rootView,
      @NonNull ShapeableImageView ImageCreateTaskBackArrow,
      @NonNull ShapeableImageView ImageCreateTaskSaveIcon,
      @NonNull LinearLayout LBLCreateTaskDescriptionContent,
      @NonNull EditText LBLCreateTaskTaskName, @NonNull RelativeLayout LBLTASKDescriptionLine,
      @NonNull RelativeLayout LBLTASKPeopleAssignedLine,
      @NonNull MaterialTextView LBLTaskDescription, @NonNull MaterialTextView LBLTaskPeopleAssigned,
      @NonNull EditText editTextCreateTaskAssignTeam,
      @NonNull EditText editTextCreateTaskDescription, @NonNull Spinner spinnerCreateTaskComplexity,
      @NonNull Spinner spinnerCreateTaskEmergency, @NonNull Spinner spinnerCreateTaskSize,
      @NonNull Spinner spinnerCreateTaskStatus) {
    this.rootView = rootView;
    this.ImageCreateTaskBackArrow = ImageCreateTaskBackArrow;
    this.ImageCreateTaskSaveIcon = ImageCreateTaskSaveIcon;
    this.LBLCreateTaskDescriptionContent = LBLCreateTaskDescriptionContent;
    this.LBLCreateTaskTaskName = LBLCreateTaskTaskName;
    this.LBLTASKDescriptionLine = LBLTASKDescriptionLine;
    this.LBLTASKPeopleAssignedLine = LBLTASKPeopleAssignedLine;
    this.LBLTaskDescription = LBLTaskDescription;
    this.LBLTaskPeopleAssigned = LBLTaskPeopleAssigned;
    this.editTextCreateTaskAssignTeam = editTextCreateTaskAssignTeam;
    this.editTextCreateTaskDescription = editTextCreateTaskDescription;
    this.spinnerCreateTaskComplexity = spinnerCreateTaskComplexity;
    this.spinnerCreateTaskEmergency = spinnerCreateTaskEmergency;
    this.spinnerCreateTaskSize = spinnerCreateTaskSize;
    this.spinnerCreateTaskStatus = spinnerCreateTaskStatus;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCreateTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCreateTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_create_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCreateTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Image_CreateTask_backArrow;
      ShapeableImageView ImageCreateTaskBackArrow = ViewBindings.findChildViewById(rootView, id);
      if (ImageCreateTaskBackArrow == null) {
        break missingId;
      }

      id = R.id.Image_CreateTask_saveIcon;
      ShapeableImageView ImageCreateTaskSaveIcon = ViewBindings.findChildViewById(rootView, id);
      if (ImageCreateTaskSaveIcon == null) {
        break missingId;
      }

      id = R.id.LBL_CreateTask_descriptionContent;
      LinearLayout LBLCreateTaskDescriptionContent = ViewBindings.findChildViewById(rootView, id);
      if (LBLCreateTaskDescriptionContent == null) {
        break missingId;
      }

      id = R.id.LBL_CreateTask_taskName;
      EditText LBLCreateTaskTaskName = ViewBindings.findChildViewById(rootView, id);
      if (LBLCreateTaskTaskName == null) {
        break missingId;
      }

      id = R.id.LBL_TASK_descriptionLine;
      RelativeLayout LBLTASKDescriptionLine = ViewBindings.findChildViewById(rootView, id);
      if (LBLTASKDescriptionLine == null) {
        break missingId;
      }

      id = R.id.LBL_TASK_peopleAssignedLine;
      RelativeLayout LBLTASKPeopleAssignedLine = ViewBindings.findChildViewById(rootView, id);
      if (LBLTASKPeopleAssignedLine == null) {
        break missingId;
      }

      id = R.id.LBL_Task_Description;
      MaterialTextView LBLTaskDescription = ViewBindings.findChildViewById(rootView, id);
      if (LBLTaskDescription == null) {
        break missingId;
      }

      id = R.id.LBL_Task_PeopleAssigned;
      MaterialTextView LBLTaskPeopleAssigned = ViewBindings.findChildViewById(rootView, id);
      if (LBLTaskPeopleAssigned == null) {
        break missingId;
      }

      id = R.id.editText_CreateTask_AssignTeam;
      EditText editTextCreateTaskAssignTeam = ViewBindings.findChildViewById(rootView, id);
      if (editTextCreateTaskAssignTeam == null) {
        break missingId;
      }

      id = R.id.editText_CreateTask_Description;
      EditText editTextCreateTaskDescription = ViewBindings.findChildViewById(rootView, id);
      if (editTextCreateTaskDescription == null) {
        break missingId;
      }

      id = R.id.spinner_CreateTask_Complexity;
      Spinner spinnerCreateTaskComplexity = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCreateTaskComplexity == null) {
        break missingId;
      }

      id = R.id.spinner_CreateTask_Emergency;
      Spinner spinnerCreateTaskEmergency = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCreateTaskEmergency == null) {
        break missingId;
      }

      id = R.id.spinner_CreateTask_Size;
      Spinner spinnerCreateTaskSize = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCreateTaskSize == null) {
        break missingId;
      }

      id = R.id.spinner_CreateTask_Status;
      Spinner spinnerCreateTaskStatus = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCreateTaskStatus == null) {
        break missingId;
      }

      return new ActivityCreateTaskBinding((RelativeLayout) rootView, ImageCreateTaskBackArrow,
          ImageCreateTaskSaveIcon, LBLCreateTaskDescriptionContent, LBLCreateTaskTaskName,
          LBLTASKDescriptionLine, LBLTASKPeopleAssignedLine, LBLTaskDescription,
          LBLTaskPeopleAssigned, editTextCreateTaskAssignTeam, editTextCreateTaskDescription,
          spinnerCreateTaskComplexity, spinnerCreateTaskEmergency, spinnerCreateTaskSize,
          spinnerCreateTaskStatus);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
