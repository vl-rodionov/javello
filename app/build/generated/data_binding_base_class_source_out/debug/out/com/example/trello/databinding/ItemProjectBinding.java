// Generated by view binder compiler. Do not edit!
package com.example.trello.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trello.R;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemProjectBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialTextView ProjectComplexity;

  @NonNull
  public final MaterialTextView ProjectEmergency;

  @NonNull
  public final MaterialTextView ProjectSize;

  @NonNull
  public final LinearLayout project;

  @NonNull
  public final Button projectDeleteButton;

  @NonNull
  public final MaterialTextView projectDescription;

  @NonNull
  public final Button projectEditButton;

  @NonNull
  public final ShapeableImageView projectImage;

  @NonNull
  public final MaterialTextView projectLeader;

  @NonNull
  public final MaterialTextView projectName;

  @NonNull
  public final LinearLayout taskButtons;

  private ItemProjectBinding(@NonNull RelativeLayout rootView,
      @NonNull MaterialTextView ProjectComplexity, @NonNull MaterialTextView ProjectEmergency,
      @NonNull MaterialTextView ProjectSize, @NonNull LinearLayout project,
      @NonNull Button projectDeleteButton, @NonNull MaterialTextView projectDescription,
      @NonNull Button projectEditButton, @NonNull ShapeableImageView projectImage,
      @NonNull MaterialTextView projectLeader, @NonNull MaterialTextView projectName,
      @NonNull LinearLayout taskButtons) {
    this.rootView = rootView;
    this.ProjectComplexity = ProjectComplexity;
    this.ProjectEmergency = ProjectEmergency;
    this.ProjectSize = ProjectSize;
    this.project = project;
    this.projectDeleteButton = projectDeleteButton;
    this.projectDescription = projectDescription;
    this.projectEditButton = projectEditButton;
    this.projectImage = projectImage;
    this.projectLeader = projectLeader;
    this.projectName = projectName;
    this.taskButtons = taskButtons;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemProjectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemProjectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_project, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemProjectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ProjectComplexity;
      MaterialTextView ProjectComplexity = ViewBindings.findChildViewById(rootView, id);
      if (ProjectComplexity == null) {
        break missingId;
      }

      id = R.id.ProjectEmergency;
      MaterialTextView ProjectEmergency = ViewBindings.findChildViewById(rootView, id);
      if (ProjectEmergency == null) {
        break missingId;
      }

      id = R.id.ProjectSize;
      MaterialTextView ProjectSize = ViewBindings.findChildViewById(rootView, id);
      if (ProjectSize == null) {
        break missingId;
      }

      id = R.id.project;
      LinearLayout project = ViewBindings.findChildViewById(rootView, id);
      if (project == null) {
        break missingId;
      }

      id = R.id.projectDeleteButton;
      Button projectDeleteButton = ViewBindings.findChildViewById(rootView, id);
      if (projectDeleteButton == null) {
        break missingId;
      }

      id = R.id.projectDescription;
      MaterialTextView projectDescription = ViewBindings.findChildViewById(rootView, id);
      if (projectDescription == null) {
        break missingId;
      }

      id = R.id.projectEditButton;
      Button projectEditButton = ViewBindings.findChildViewById(rootView, id);
      if (projectEditButton == null) {
        break missingId;
      }

      id = R.id.projectImage;
      ShapeableImageView projectImage = ViewBindings.findChildViewById(rootView, id);
      if (projectImage == null) {
        break missingId;
      }

      id = R.id.projectLeader;
      MaterialTextView projectLeader = ViewBindings.findChildViewById(rootView, id);
      if (projectLeader == null) {
        break missingId;
      }

      id = R.id.projectName;
      MaterialTextView projectName = ViewBindings.findChildViewById(rootView, id);
      if (projectName == null) {
        break missingId;
      }

      id = R.id.taskButtons;
      LinearLayout taskButtons = ViewBindings.findChildViewById(rootView, id);
      if (taskButtons == null) {
        break missingId;
      }

      return new ItemProjectBinding((RelativeLayout) rootView, ProjectComplexity, ProjectEmergency,
          ProjectSize, project, projectDeleteButton, projectDescription, projectEditButton,
          projectImage, projectLeader, projectName, taskButtons);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
