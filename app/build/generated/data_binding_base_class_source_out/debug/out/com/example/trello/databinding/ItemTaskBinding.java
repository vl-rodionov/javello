// Generated by view binder compiler. Do not edit!
package com.example.trello.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.trello.R;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTaskBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout project;

  @NonNull
  public final ShapeableImageView projectImage;

  @NonNull
  public final LinearLayout taskButtons;

  @NonNull
  public final MaterialTextView taskComplexity;

  @NonNull
  public final Button taskDeleteButton;

  @NonNull
  public final MaterialTextView taskDescription;

  @NonNull
  public final Button taskEditButton;

  @NonNull
  public final MaterialTextView taskEmergency;

  @NonNull
  public final MaterialTextView taskName;

  @NonNull
  public final MaterialTextView taskSize;

  @NonNull
  public final ShapeableImageView taskWarning;

  private ItemTaskBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout project,
      @NonNull ShapeableImageView projectImage, @NonNull LinearLayout taskButtons,
      @NonNull MaterialTextView taskComplexity, @NonNull Button taskDeleteButton,
      @NonNull MaterialTextView taskDescription, @NonNull Button taskEditButton,
      @NonNull MaterialTextView taskEmergency, @NonNull MaterialTextView taskName,
      @NonNull MaterialTextView taskSize, @NonNull ShapeableImageView taskWarning) {
    this.rootView = rootView;
    this.project = project;
    this.projectImage = projectImage;
    this.taskButtons = taskButtons;
    this.taskComplexity = taskComplexity;
    this.taskDeleteButton = taskDeleteButton;
    this.taskDescription = taskDescription;
    this.taskEditButton = taskEditButton;
    this.taskEmergency = taskEmergency;
    this.taskName = taskName;
    this.taskSize = taskSize;
    this.taskWarning = taskWarning;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTaskBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_task, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTaskBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.project;
      LinearLayout project = ViewBindings.findChildViewById(rootView, id);
      if (project == null) {
        break missingId;
      }

      id = R.id.projectImage;
      ShapeableImageView projectImage = ViewBindings.findChildViewById(rootView, id);
      if (projectImage == null) {
        break missingId;
      }

      id = R.id.taskButtons;
      LinearLayout taskButtons = ViewBindings.findChildViewById(rootView, id);
      if (taskButtons == null) {
        break missingId;
      }

      id = R.id.taskComplexity;
      MaterialTextView taskComplexity = ViewBindings.findChildViewById(rootView, id);
      if (taskComplexity == null) {
        break missingId;
      }

      id = R.id.taskDeleteButton;
      Button taskDeleteButton = ViewBindings.findChildViewById(rootView, id);
      if (taskDeleteButton == null) {
        break missingId;
      }

      id = R.id.taskDescription;
      MaterialTextView taskDescription = ViewBindings.findChildViewById(rootView, id);
      if (taskDescription == null) {
        break missingId;
      }

      id = R.id.taskEditButton;
      Button taskEditButton = ViewBindings.findChildViewById(rootView, id);
      if (taskEditButton == null) {
        break missingId;
      }

      id = R.id.taskEmergency;
      MaterialTextView taskEmergency = ViewBindings.findChildViewById(rootView, id);
      if (taskEmergency == null) {
        break missingId;
      }

      id = R.id.taskName;
      MaterialTextView taskName = ViewBindings.findChildViewById(rootView, id);
      if (taskName == null) {
        break missingId;
      }

      id = R.id.taskSize;
      MaterialTextView taskSize = ViewBindings.findChildViewById(rootView, id);
      if (taskSize == null) {
        break missingId;
      }

      id = R.id.taskWarning;
      ShapeableImageView taskWarning = ViewBindings.findChildViewById(rootView, id);
      if (taskWarning == null) {
        break missingId;
      }

      return new ItemTaskBinding((RelativeLayout) rootView, project, projectImage, taskButtons,
          taskComplexity, taskDeleteButton, taskDescription, taskEditButton, taskEmergency,
          taskName, taskSize, taskWarning);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
